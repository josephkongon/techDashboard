import {
  require_react
} from "./chunk-TJOSTKI6.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/react-ladda-button/dist/index.modern.js
var import_react = __toESM(require_react());

// node_modules/spin.js/spin.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var defaults = {
  lines: 12,
  length: 7,
  width: 5,
  radius: 10,
  scale: 1,
  corners: 1,
  color: "#000",
  fadeColor: "transparent",
  animation: "spinner-line-fade-default",
  rotate: 0,
  direction: 1,
  speed: 1,
  zIndex: 2e9,
  className: "spinner",
  top: "50%",
  left: "50%",
  shadow: "0 0 1px transparent",
  // prevent aliased lines
  position: "absolute"
};
var Spinner = (
  /** @class */
  function() {
    function Spinner2(opts) {
      if (opts === void 0) {
        opts = {};
      }
      this.opts = __assign(__assign({}, defaults), opts);
    }
    Spinner2.prototype.spin = function(target) {
      this.stop();
      this.el = document.createElement("div");
      this.el.className = this.opts.className;
      this.el.setAttribute("role", "progressbar");
      this.el.style.position = this.opts.position;
      this.el.style.width = "0";
      this.el.style.zIndex = this.opts.zIndex.toString();
      this.el.style.left = this.opts.left;
      this.el.style.top = this.opts.top;
      this.el.style.transform = "scale(".concat(this.opts.scale, ")");
      if (target) {
        target.insertBefore(this.el, target.firstChild || null);
      }
      drawLines(this.el, this.opts);
      return this;
    };
    Spinner2.prototype.stop = function() {
      if (this.el) {
        if (this.el.parentNode) {
          this.el.parentNode.removeChild(this.el);
        }
        this.el = void 0;
      }
      return this;
    };
    return Spinner2;
  }()
);
function getColor(color, idx) {
  return typeof color == "string" ? color : color[idx % color.length];
}
function drawLines(el, opts) {
  var borderRadius = Math.round(opts.corners * opts.width * 500) / 1e3 + "px";
  var shadow = "none";
  if (opts.shadow === true) {
    shadow = "0 2px 4px #000";
  } else if (typeof opts.shadow === "string") {
    shadow = opts.shadow;
  }
  var shadows = parseBoxShadow(shadow);
  for (var i = 0; i < opts.lines; i++) {
    var degrees = ~~(360 / opts.lines * i + opts.rotate);
    var backgroundLine = document.createElement("div");
    backgroundLine.style.position = "absolute";
    backgroundLine.style.top = "".concat(-opts.width / 2, "px");
    backgroundLine.style.width = opts.length + opts.width + "px";
    backgroundLine.style.height = opts.width + "px";
    backgroundLine.style.background = getColor(opts.fadeColor, i);
    backgroundLine.style.borderRadius = borderRadius;
    backgroundLine.style.transformOrigin = "left";
    backgroundLine.style.transform = "rotate(".concat(degrees, "deg) translateX(").concat(opts.radius, "px)");
    var delay = i * opts.direction / opts.lines / opts.speed;
    delay -= 1 / opts.speed;
    var line = document.createElement("div");
    line.style.width = "100%";
    line.style.height = "100%";
    line.style.background = getColor(opts.color, i);
    line.style.borderRadius = borderRadius;
    line.style.boxShadow = normalizeShadow(shadows, degrees);
    line.style.animation = "".concat(1 / opts.speed, "s linear ").concat(delay, "s infinite ").concat(opts.animation);
    backgroundLine.appendChild(line);
    el.appendChild(backgroundLine);
  }
}
function parseBoxShadow(boxShadow) {
  var regex = /^\s*([a-zA-Z]+\s+)?(-?\d+(\.\d+)?)([a-zA-Z]*)\s+(-?\d+(\.\d+)?)([a-zA-Z]*)(.*)$/;
  var shadows = [];
  for (var _i = 0, _a = boxShadow.split(","); _i < _a.length; _i++) {
    var shadow = _a[_i];
    var matches = shadow.match(regex);
    if (matches === null) {
      continue;
    }
    var x = +matches[2];
    var y = +matches[5];
    var xUnits = matches[4];
    var yUnits = matches[7];
    if (x === 0 && !xUnits) {
      xUnits = yUnits;
    }
    if (y === 0 && !yUnits) {
      yUnits = xUnits;
    }
    if (xUnits !== yUnits) {
      continue;
    }
    shadows.push({
      prefix: matches[1] || "",
      // could have value of 'inset' or undefined
      x,
      y,
      xUnits,
      yUnits,
      end: matches[8]
    });
  }
  return shadows;
}
function normalizeShadow(shadows, degrees) {
  var normalized = [];
  for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {
    var shadow = shadows_1[_i];
    var xy = convertOffset(shadow.x, shadow.y, degrees);
    normalized.push(shadow.prefix + xy[0] + shadow.xUnits + " " + xy[1] + shadow.yUnits + shadow.end);
  }
  return normalized.join(", ");
}
function convertOffset(x, y, degrees) {
  var radians = degrees * Math.PI / 180;
  var sin = Math.sin(radians);
  var cos = Math.cos(radians);
  return [
    Math.round((x * cos + y * sin) * 1e3) / 1e3,
    Math.round((-x * sin + y * cos) * 1e3) / 1e3
  ];
}

// node_modules/react-ladda-button/dist/index.modern.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var XS = "xs";
var S = "s";
var L = "l";
var XL = "xl";
var SIZES = [XS, S, L, XL];
var CONTRACT = "contract";
var CONTRACT_OVERLAY = "contract-overlay";
var EXPAND_LEFT = "expand-left";
var EXPAND_RIGHT = "expand-right";
var EXPAND_UP = "expand-up";
var EXPAND_DOWN = "expand-down";
var SLIDE_LEFT = "slide-left";
var SLIDE_RIGHT = "slide-right";
var SLIDE_UP = "slide-up";
var SLIDE_DOWN = "slide-down";
var ZOOM_IN = "zoom-in";
var ZOOM_OUT = "zoom-out";
var STYLES = [EXPAND_LEFT, EXPAND_RIGHT, EXPAND_UP, EXPAND_DOWN, CONTRACT, CONTRACT_OVERLAY, ZOOM_IN, ZOOM_OUT, SLIDE_LEFT, SLIDE_RIGHT, SLIDE_UP, SLIDE_DOWN];
var LaddaButton = import_react.default.memo(function(_ref) {
  var _buttonRef$current2;
  var className = _ref.className, children = _ref.children, disabled = _ref.disabled, loading = _ref.loading, progress = _ref.progress, restProps = _objectWithoutPropertiesLoose(_ref, ["className", "children", "disabled", "loading", "progress"]);
  var buttonRef = (0, import_react.useRef)(null);
  var spinner = (0, import_react.useRef)();
  var timer = (0, import_react.useRef)();
  (0, import_react.useEffect)(function() {
    if (loading) {
      var _spinner$current, _buttonRef$current;
      timer.current && clearTimeout(timer.current);
      var createSpinner = function createSpinner2() {
        var height = buttonRef.current ? buttonRef.current.offsetHeight : 0, spinnerColor, spinnerLines;
        if (height === 0) {
          if (buttonRef.current) height = parseFloat(window.getComputedStyle(buttonRef.current).height);
        }
        if (height > 32) {
          height *= 0.8;
        }
        if (restProps["data-spinner-size"]) {
          height = restProps["data-spinner-size"] || 10;
        }
        if (restProps["data-spinner-color"]) {
          spinnerColor = restProps["data-spinner-color"];
        }
        if (restProps["data-spinner-lines"]) {
          spinnerLines = restProps["data-spinner-lines"] || 12;
        }
        var radius = height * 0.2, length = radius * 0.6, width = radius < 7 ? 2 : 3;
        return new Spinner({
          color: spinnerColor || "#fff",
          lines: spinnerLines || 12,
          radius,
          length,
          width,
          animation: "ladda-spinner-line-fade",
          top: "auto",
          left: "auto",
          className: ""
        });
      };
      if (!spinner.current) spinner.current = createSpinner();
      (_spinner$current = spinner.current) === null || _spinner$current === void 0 ? void 0 : _spinner$current.spin(((_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.querySelector(".ladda-spinner")) || void 0);
    } else {
      if (spinner) {
        var tv = timer.current = setTimeout(function() {
          var _spinner$current2;
          (_spinner$current2 = spinner.current) === null || _spinner$current2 === void 0 ? void 0 : _spinner$current2.stop();
        }, 1e3);
        return function() {
          return clearTimeout(tv);
        };
      }
    }
    return void 0;
  }, [loading]);
  var dloadingProp = loading ? {
    "data-loading": ""
  } : {};
  restProps = _extends({}, restProps, {
    "data-style": restProps["data-style"] || EXPAND_LEFT
  });
  return import_react.default.createElement("button", Object.assign({}, dloadingProp, restProps, {
    className: "ladda-button " + (className || ""),
    ref: buttonRef,
    disabled: disabled || loading
  }), import_react.default.createElement("span", {
    className: "ladda-label"
  }, children), import_react.default.createElement("span", {
    className: "ladda-spinner"
  }), !!progress && import_react.default.createElement("div", {
    className: "ladda-progress",
    style: {
      width: Math.max(Math.min(progress || 0, 1), 0) * (((_buttonRef$current2 = buttonRef.current) === null || _buttonRef$current2 === void 0 ? void 0 : _buttonRef$current2.offsetWidth) || 0) + "px"
    }
  }));
});
var index_modern_default = LaddaButton;
export {
  CONTRACT,
  CONTRACT_OVERLAY,
  EXPAND_DOWN,
  EXPAND_LEFT,
  EXPAND_RIGHT,
  EXPAND_UP,
  L,
  LaddaButton,
  S,
  SIZES,
  SLIDE_DOWN,
  SLIDE_LEFT,
  SLIDE_RIGHT,
  SLIDE_UP,
  STYLES,
  XL,
  XS,
  ZOOM_IN,
  ZOOM_OUT,
  index_modern_default as default
};
//# sourceMappingURL=react-ladda-button.js.map

{
  "version": 3,
  "sources": ["../../spin.js/spin.js", "../../react-ladda-button/src/index.tsx"],
  "sourcesContent": ["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar defaults = {\n    lines: 12,\n    length: 7,\n    width: 5,\n    radius: 10,\n    scale: 1.0,\n    corners: 1,\n    color: '#000',\n    fadeColor: 'transparent',\n    animation: 'spinner-line-fade-default',\n    rotate: 0,\n    direction: 1,\n    speed: 1,\n    zIndex: 2e9,\n    className: 'spinner',\n    top: '50%',\n    left: '50%',\n    shadow: '0 0 1px transparent', // prevent aliased lines\n    position: 'absolute',\n};\nvar Spinner = /** @class */ (function () {\n    function Spinner(opts) {\n        if (opts === void 0) { opts = {}; }\n        this.opts = __assign(__assign({}, defaults), opts);\n    }\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target by calling\n     * stop() internally.\n     */\n    Spinner.prototype.spin = function (target) {\n        this.stop();\n        this.el = document.createElement('div');\n        this.el.className = this.opts.className;\n        this.el.setAttribute('role', 'progressbar');\n        this.el.style.position = this.opts.position;\n        this.el.style.width = \"0\";\n        this.el.style.zIndex = this.opts.zIndex.toString();\n        this.el.style.left = this.opts.left;\n        this.el.style.top = this.opts.top;\n        this.el.style.transform = \"scale(\".concat(this.opts.scale, \")\");\n        if (target) {\n            target.insertBefore(this.el, target.firstChild || null);\n        }\n        drawLines(this.el, this.opts);\n        return this;\n    };\n    /**\n     * Stops and removes the Spinner.\n     * Stopped spinners may be reused by calling spin() again.\n     */\n    Spinner.prototype.stop = function () {\n        if (this.el) {\n            if (this.el.parentNode) {\n                this.el.parentNode.removeChild(this.el);\n            }\n            this.el = undefined;\n        }\n        return this;\n    };\n    return Spinner;\n}());\nexport { Spinner };\n/**\n * Returns the line color from the given string or array.\n */\nfunction getColor(color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length];\n}\n/**\n * Internal method that draws the individual lines.\n */\nfunction drawLines(el, opts) {\n    var borderRadius = (Math.round(opts.corners * opts.width * 500) / 1000) + 'px';\n    var shadow = 'none';\n    if (opts.shadow === true) {\n        shadow = '0 2px 4px #000'; // default shadow\n    }\n    else if (typeof opts.shadow === 'string') {\n        shadow = opts.shadow;\n    }\n    var shadows = parseBoxShadow(shadow);\n    for (var i = 0; i < opts.lines; i++) {\n        var degrees = ~~(360 / opts.lines * i + opts.rotate);\n        var backgroundLine = document.createElement('div');\n        backgroundLine.style.position = 'absolute';\n        backgroundLine.style.top = \"\".concat(-opts.width / 2, \"px\");\n        backgroundLine.style.width = (opts.length + opts.width) + 'px';\n        backgroundLine.style.height = opts.width + 'px';\n        backgroundLine.style.background = getColor(opts.fadeColor, i);\n        backgroundLine.style.borderRadius = borderRadius;\n        backgroundLine.style.transformOrigin = 'left';\n        backgroundLine.style.transform = \"rotate(\".concat(degrees, \"deg) translateX(\").concat(opts.radius, \"px)\");\n        var delay = i * opts.direction / opts.lines / opts.speed;\n        delay -= 1 / opts.speed; // so initial animation state will include trail\n        var line = document.createElement('div');\n        line.style.width = '100%';\n        line.style.height = '100%';\n        line.style.background = getColor(opts.color, i);\n        line.style.borderRadius = borderRadius;\n        line.style.boxShadow = normalizeShadow(shadows, degrees);\n        line.style.animation = \"\".concat(1 / opts.speed, \"s linear \").concat(delay, \"s infinite \").concat(opts.animation);\n        backgroundLine.appendChild(line);\n        el.appendChild(backgroundLine);\n    }\n}\nfunction parseBoxShadow(boxShadow) {\n    var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\n    var shadows = [];\n    for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\n        var shadow = _a[_i];\n        var matches = shadow.match(regex);\n        if (matches === null) {\n            continue; // invalid syntax\n        }\n        var x = +matches[2];\n        var y = +matches[5];\n        var xUnits = matches[4];\n        var yUnits = matches[7];\n        if (x === 0 && !xUnits) {\n            xUnits = yUnits;\n        }\n        if (y === 0 && !yUnits) {\n            yUnits = xUnits;\n        }\n        if (xUnits !== yUnits) {\n            continue; // units must match to use as coordinates\n        }\n        shadows.push({\n            prefix: matches[1] || '', // could have value of 'inset' or undefined\n            x: x,\n            y: y,\n            xUnits: xUnits,\n            yUnits: yUnits,\n            end: matches[8],\n        });\n    }\n    return shadows;\n}\n/**\n * Modify box-shadow x/y offsets to counteract rotation\n */\nfunction normalizeShadow(shadows, degrees) {\n    var normalized = [];\n    for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\n        var shadow = shadows_1[_i];\n        var xy = convertOffset(shadow.x, shadow.y, degrees);\n        normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\n    }\n    return normalized.join(', ');\n}\nfunction convertOffset(x, y, degrees) {\n    var radians = degrees * Math.PI / 180;\n    var sin = Math.sin(radians);\n    var cos = Math.cos(radians);\n    return [\n        Math.round((x * cos + y * sin) * 1000) / 1000,\n        Math.round((-x * sin + y * cos) * 1000) / 1000,\n    ];\n}\n", "import React, { useEffect, useRef } from 'react';\r\nimport { Spinner } from 'spin.js';\r\n\r\nexport const XS = 'xs'\r\nexport const S = 's'\r\nexport const L = 'l'\r\nexport const XL = 'xl'\r\n\r\nexport const SIZES = [XS, S, L, XL] as const\r\n\r\nexport const CONTRACT = 'contract'\r\nexport const CONTRACT_OVERLAY = 'contract-overlay'\r\nexport const EXPAND_LEFT = 'expand-left'\r\nexport const EXPAND_RIGHT = 'expand-right'\r\nexport const EXPAND_UP = 'expand-up'\r\nexport const EXPAND_DOWN = 'expand-down'\r\nexport const SLIDE_LEFT = 'slide-left'\r\nexport const SLIDE_RIGHT = 'slide-right'\r\nexport const SLIDE_UP = 'slide-up'\r\nexport const SLIDE_DOWN = 'slide-down'\r\nexport const ZOOM_IN = 'zoom-in'\r\nexport const ZOOM_OUT = 'zoom-out'\r\n\r\nexport const STYLES = [\r\n  EXPAND_LEFT,\r\n  EXPAND_RIGHT,\r\n  EXPAND_UP,\r\n  EXPAND_DOWN,\r\n  CONTRACT,\r\n  CONTRACT_OVERLAY,\r\n  ZOOM_IN,\r\n  ZOOM_OUT,\r\n  SLIDE_LEFT,\r\n  SLIDE_RIGHT,\r\n  SLIDE_UP,\r\n  SLIDE_DOWN,\r\n] as const\r\n\r\nexport interface LaddaButtonProps {\r\n  className?: string;\r\n  progress?: number;\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n  'data-color'?: string;\r\n  'data-size'?: typeof SIZES[number];\r\n  'data-style'?: typeof STYLES[number];\r\n  'data-spinner-size'?: number;\r\n  'data-spinner-color'?: string;\r\n  'data-spinner-lines'?: number;\r\n}\r\n\r\nexport const LaddaButton: React.FC<LaddaButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> = React.memo(\r\n  ({className, children, disabled, loading, progress, ...restProps}) => {\r\n  \r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n  const spinner = useRef<Spinner>();\r\n  const timer = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    if(loading){\r\n      timer.current && clearTimeout(timer.current);\r\n      const createSpinner = () => {\r\n        var height = buttonRef.current ? buttonRef.current.offsetHeight : 0,\r\n            spinnerColor,\r\n            spinnerLines;\r\n    \r\n        if (height === 0) {\r\n            // We may have an element that is not visible so\r\n            // we attempt to get the height in a different way\r\n            if(buttonRef.current)\r\n              height = parseFloat(window.getComputedStyle(buttonRef.current).height);\r\n        }\r\n    \r\n        // If the button is tall we can afford some padding\r\n        if (height > 32) {\r\n            height *= 0.8;\r\n        }\r\n    \r\n        // Prefer an explicit height if one is defined\r\n        if (restProps[\"data-spinner-size\"]) {\r\n            height = restProps[\"data-spinner-size\"] || 10;\r\n        }\r\n    \r\n        // Allow buttons to specify the color of the spinner element\r\n        if (restProps['data-spinner-color']) {\r\n            spinnerColor = restProps['data-spinner-color'];\r\n        }\r\n    \r\n        // Allow buttons to specify the number of lines of the spinner\r\n        if (restProps['data-spinner-lines']) {\r\n            spinnerLines = restProps['data-spinner-lines'] || 12\r\n        }\r\n    \r\n        var radius = height * 0.2,\r\n            length = radius * 0.6,\r\n            width = radius < 7 ? 2 : 3;\r\n    \r\n        return new Spinner({\r\n            color: spinnerColor || '#fff',\r\n            lines: spinnerLines || 12,\r\n            radius: radius,\r\n            length: length,\r\n            width: width,\r\n            animation: 'ladda-spinner-line-fade',\r\n            top: 'auto',\r\n            left: 'auto',\r\n            className: ''\r\n        });\r\n      }\r\n\r\n      if(!spinner.current) spinner.current = createSpinner();\r\n        spinner.current?.spin(buttonRef.current?.querySelector('.ladda-spinner') as HTMLElement||undefined);\r\n    } else{\r\n      if (spinner) {\r\n        //make sure the spinner keeps spinning for the button contracting animation\r\n        const tv = timer.current = setTimeout(function() { spinner.current?.stop(); }, 1000);\r\n        return ()=>clearTimeout(tv);\r\n      }\r\n    }\r\n\r\n    //ts doesn't like sometimesy returns\r\n    return undefined;\r\n  }, [loading])\r\n\r\n  const dloadingProp = loading ? {'data-loading':''} : {};\r\n  restProps = {...restProps, 'data-style': restProps['data-style'] || EXPAND_LEFT}; //set default data-style\r\n\r\n  return (\r\n    <button\r\n      {...dloadingProp}\r\n      {...restProps}\r\n      className={`ladda-button ${className || ''}`}\r\n      ref={buttonRef}\r\n      disabled={disabled || loading}\r\n    >\r\n      <span className=\"ladda-label\">{children}</span>\r\n      <span className=\"ladda-spinner\"></span>\r\n      {!!progress &&\r\n        <div\r\n          className=\"ladda-progress\"\r\n          style={{width: ((Math.max(Math.min(progress||0, 1), 0)) * (buttonRef.current?.offsetWidth||0)) + 'px'}}>\r\n        </div>\r\n      }\r\n    </button>\r\n  )\r\n});\r\n\r\nexport default LaddaButton;"],
  "mappings": "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",
  "names": ["Spinner", "XS", "S", "L", "XL", "SIZES", "CONTRACT", "CONTRACT_OVERLAY", "EXPAND_LEFT", "EXPAND_RIGHT", "EXPAND_UP", "EXPAND_DOWN", "SLIDE_LEFT", "SLIDE_RIGHT", "SLIDE_UP", "SLIDE_DOWN", "ZOOM_IN", "ZOOM_OUT", "STYLES", "LaddaButton", "React", "memo", "className", "children", "disabled", "loading", "progress", "restProps", "buttonRef", "useRef", "spinner", "timer", "useEffect", "current", "clearTimeout", "createSpinner", "height", "offsetHeight", "spinnerColor", "spinnerLines", "parseFloat", "window", "getComputedStyle", "radius", "length", "width", "Spinner", "color", "lines", "animation", "top", "left", "spin", "querySelector", "undefined", "tv", "setTimeout", "stop", "dloadingProp", "ref", "style", "Math", "max", "min", "offsetWidth"]
}

import { useEffect, useRef } from 'react';
import useEventCallback from '@restart/hooks/useEventCallback';
import useClickOutside from './useClickOutside';
import { noop } from '../../utils';
function useRootClose(onRootClose, options) {
    const ref = useRef(null);
    const onClose = onRootClose || noop;
    useClickOutside(ref, onClose, options);
    const handleKeyUp = useEventCallback((e) => {
        if (e.key === 'Escape') {
            onClose(e);
        }
    });
    useEffect(() => {
        if (options.disabled || ref == null)
            return undefined;
        const doc = ref.current?.ownerDocument || document;
        let currentEvent = (doc.defaultView || window).event;
        const onKeyUp = (e) => {
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleKeyUp(e);
        };
        doc.addEventListener('keyup', onKeyUp);
        return () => {
            doc.removeEventListener('keyup', onKeyUp);
        };
    }, [ref, options.disabled, handleKeyUp]);
    return ref;
}
export default useRootClose;

import { useCallback, useEffect, useRef } from 'react';
import useEventCallback from '@restart/hooks/useEventCallback';
import { noop, warn } from '../../utils';
function isLeftClickEvent(event) {
    return event.button === 0;
}
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
const InitialTriggerEvents = {
    click: 'mousedown',
    mouseup: 'mousedown',
    pointerup: 'pointerdown',
};
function useClickOutside(ref, onClickOutside = noop, { disabled, clickTrigger = 'click' } = {}) {
    const preventMouseClickOutsideRef = useRef(false);
    const waitingForTrigger = useRef(false);
    const handleMouseCapture = useCallback((e) => {
        const currentTarget = ref.current;
        warn(!!currentTarget, 'ClickOutside captured a close event but does not have a ref to compare it to. ' +
            'useClickOutside(), should be passed a ref that resolves to a DOM node');
        preventMouseClickOutsideRef.current =
            !currentTarget ||
                isModifiedEvent(e) ||
                !isLeftClickEvent(e) ||
                !!currentTarget.contains(e.target) ||
                waitingForTrigger.current;
        waitingForTrigger.current = false;
    }, [ref]);
    const handleInitialMouse = useEventCallback((e) => {
        const currentTarget = ref.current;
        if (currentTarget?.contains(e.target)) {
            waitingForTrigger.current = true;
        }
        else {
            waitingForTrigger.current = false;
        }
    });
    const handleMouse = useEventCallback((e) => {
        if (!preventMouseClickOutsideRef.current) {
            onClickOutside(e);
        }
    });
    useEffect(() => {
        if (disabled || ref == null)
            return undefined;
        const doc = ref.current?.ownerDocument || document;
        const ownerWindow = doc.defaultView || window;
        let currentEvent = ownerWindow.event ?? ownerWindow.parent?.event;
        let removeInitialTriggerListener = null;
        if (InitialTriggerEvents[clickTrigger]) {
            doc.addEventListener(InitialTriggerEvents[clickTrigger], handleInitialMouse, true);
            removeInitialTriggerListener = () => {
                doc.removeEventListener(InitialTriggerEvents[clickTrigger], handleInitialMouse);
            };
        }
        const handleMouseTrigger = (e) => {
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleMouse(e);
        };
        doc.addEventListener(clickTrigger, handleMouseCapture, true);
        doc.addEventListener(clickTrigger, handleMouseTrigger, true);
        return () => {
            removeInitialTriggerListener?.();
            doc.removeEventListener(clickTrigger, handleMouseCapture);
            doc.removeEventListener(clickTrigger, handleMouseTrigger);
        };
    }, [
        ref,
        disabled,
        clickTrigger,
        handleMouseCapture,
        handleInitialMouse,
        handleMouse,
    ]);
}
export default useClickOutside;
